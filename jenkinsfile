def EC2_PUBLIC_IP = ""
def RDS_ENDPOINT = ""
def DEPLOYER_KEY_URI = ""

pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials('jenkins_aws_access_key_id')
        AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
        AWS_CREDENTIALS_ID = 'aws-credentials'
        ECR_REPO_URL = '307946682088.dkr.ecr.us-east-1.amazonaws.com'
        ECR_REPO_NAME = 'test'
        IMAGE_REPO = "${ECR_REPO_URL}/${ECR_REPO_NAME}"
        IMAGE_REPO_FRONTEND = "${IMAGE_REPO}:frontend-1.0"
        IMAGE_REPO_BACKEND = "${IMAGE_REPO}:backend-1.0"
        AWS_REGION = "us-east-1"
    }
    stages {
        stage('Provision Server and Database') {
            steps {
                script {
                    dir('my-terraform-project') {
                        // Initialize Terraform
                        bat "terraform init"
                        bat "terraform plan -lock=false"
                        // Apply Terraform configuration
                        bat "terraform apply -lock=false --auto-approve"

                        // Get EC2 Public IP
                        EC2_PUBLIC_IP = bat(
                            script: 'terraform output instance_details | findstr "instance_public_ip" | for /f "tokens=3" %a in (%s) do echo %a',
                            returnStdout: true
                        ).trim()
                        
                        // Get RDS Endpoint
                        RDS_ENDPOINT = bat(
                            script: '''
                            for /f "tokens=2 delims==" %a in ('terraform output rds_endpoint') do set RDS_ENDPOINT=%a
                            echo %RDS_ENDPOINT% | sed "s/:3306//"
                            ''',
                            returnStdout: true
                        ).trim()

                        DEPLOYER_KEY_URI = bat(
                            script: 'terraform output deployer_key_s3_uri | tr -d \'"\'',
                            returnStdout: true
                        ).trim()
                        
                        // Debugging: Print captured values
                        echo "EC2 Public IP: ${EC2_PUBLIC_IP}"
                        echo "RDS Endpoint: ${RDS_ENDPOINT}"
                        echo "Deployer Key URI: ${DEPLOYER_KEY_URI}"
                    }
                }
            }
        }
        stage('Update Frontend Configuration') {
            steps {
                script {
                    dir('enis-app-tp/frontend/src') {
                        writeFile file: 'config.js', text: """
                        export const API_BASE_URL = 'http://${EC2_PUBLIC_IP}:8000';
                        """
                        bat '''
                        echo "Contents of config.js after update:"
                        type config.js
                        '''
                    }
                }
            }
        }
        stage('Update Backend Configuration') {
            steps {
                script {
                    dir('enis-app-tp/backend/backend') {
                        // Verify the existence of settings.py
                        bat '''
                        if exist "settings.py" (
                            echo "Found settings.py at %cd%"
                        ) else (
                            echo "settings.py not found in %cd%!"
                            exit /b 1
                        )
                        '''
                        // Update the HOST in the DATABASES section
                        bat """
                        powershell -Command "(Get-Content settings.py) -replace '\\'HOST\\':.*', \\'HOST\\': '${RDS_ENDPOINT}',' | Set-Content settings.py"
                        """
                        // Verify the DATABASES section after the update
                        bat '''
                        echo "DATABASES section of settings.py after update:"
                        powershell -Command "(Select-String -Pattern 'DATABASES = {' -Context 0,5 settings.py) | foreach { $_.Line }"
                        '''
                    }
                }
            }
        }
        stage('Create Database in RDS') {
            steps {
                script {
                    bat """
                    mysql -h ${RDS_ENDPOINT} -P 3306 -u dbuser -pDBpassword2024 -e "CREATE DATABASE IF NOT EXISTS enis_tp;"
                    mysql -h ${RDS_ENDPOINT} -P 3306 -u dbuser -pDBpassword2024 -e "SHOW DATABASES;"
                    """
                }
            }
        }
        stage('Build Frontend Docker Image') {
            steps {
                dir('enis-app-tp/frontend') {
                    script {
                        echo 'Building Frontend Docker Image...'
                        def frontendImage = docker.build('frontend-app')
                        echo "Built Image: ${frontendImage.id}"
                    }
                }
            }
        }
        stage('Build Backend Docker Image') {
            steps {
                dir('enis-app-tp/backend') {
                    script {
                        echo 'Building Backend Docker Image...'
                        def backendImage = docker.build('backend-app')
                        echo "Built Image: ${backendImage.id}"
                    }
                }
            }
        }
        stage('Login to AWS ECR') {
            steps {
                script {
                    bat """
                    aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URL}
                    """
                }
            }
        }
        stage('Tag and Push Frontend Image') {
            steps {
                script {
                    echo 'Tagging and pushing Frontend Image...'
                    bat "docker tag frontend-app:latest $IMAGE_REPO_FRONTEND"
                    bat "docker push $IMAGE_REPO_FRONTEND"
                }
            }
        }
        stage('Tag and Push Backend Image') {
            steps {
                script {
                    echo 'Tagging and pushing Backend Image...'
                    bat "docker tag backend-app:latest $IMAGE_REPO_BACKEND"
                    bat "docker push $IMAGE_REPO_BACKEND"
                }
            }
        }
        stage('Download SSH Key from S3') {
            steps {
                script {
                    dir('ansible') {
                        bat '''
                        if exist "deployer_key.pem" (
                            echo "Deleting existing deployer_key.pem"
                            del deployer_key.pem
                        )
                        aws s3 cp ${DEPLOYER_KEY_URI} deployer_key.pem
                        chmod 600 deployer_key.pem
                        '''
                    }
                }
            }
        }
        stage('Update Hosts File') {
            steps {
                script {
                    dir('ansible') {
                        bat '''
                        if exist "hosts" (
                            echo "Found hosts file at %cd%"
                            powershell -Command "(Get-Content hosts) -replace '.*', '${EC2_PUBLIC_IP}' | Set-Content hosts"
                            echo "Updated hosts file:"
                            type hosts
                        ) else (
                            echo "hosts file not found in %cd%!"
                            exit /b 1
                        )
                        '''
                    }
                }
            }
        }
        stage('Check and Manage Ansible Container') {
            steps {
                script {
                    dir('ansible') {
                        bat '''
                        echo "Checking and managing the 'my_ansible_container'"
                        CONTAINER_NAME="my_ansible_container"
                        IMAGE_NAME="cytopia/ansible"
                        if docker ps -a --format '{{.Names}}' | findstr "^${CONTAINER_NAME}$" > nul; then
                            echo "Container ${CONTAINER_NAME} exists. Stopping and removing it..."
                            docker stop ${CONTAINER_NAME} || true
                            docker rm ${CONTAINER_NAME} || true
                        fi

                        echo "Creating and starting a new container with the ansible directory mounted..."
                        docker run -dit --name ${CONTAINER_NAME} -v %cd%:/ansible -w /ansible ${IMAGE_NAME} sh -c "while true; do sleep 30; done"

                        echo "Verifying the ansible directory and its contents in the container:"
                        docker exec ${CONTAINER_NAME} sh -c "ls /ansible && cat /ansible/hosts || echo 'Directory or file not found'"
                        '''
                    }
                }
            }
        }
        stage('Install OpenSSH in Ansible Container') {
            steps {
                script {
                    dir('ansible') {
                        bat '''
                        echo "Installing OpenSSH in the Ansible container"
                        CONTAINER_NAME="my_ansible_container"
                        docker exec ${CONTAINER_NAME} sh -c "apk update && apk add openssh"
                        echo "Verifying OpenSSH installation"
                        docker exec ${CONTAINER_NAME} ssh -V || echo "OpenSSH not installed correctly"
                        '''
                    }
                }
            }
        }
        stage('Run Ansible Playbook') {
            steps {
                script {
                    dir('ansible') {
                        bat '''
                        echo "Running Ansible playbook inside the container"
                        CONTAINER_NAME="my_ansible_container"
                        PLAYBOOK="docker_deploy_playbook.yml"
                        INVENTORY="hosts"
                        
                        if exist "${PLAYBOOK}" (
                            echo "Playbook ${PLAYBOOK} found. Running it now..."
                            docker exec ${CONTAINER_NAME} ansible-playbook -i ${INVENTORY} ${PLAYBOOK}
                        ) else (
                            echo "Playbook ${PLAYBOOK} not found!"
                            exit /b 1
                        )
                        '''
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def instanceUrl = "http://${EC2_PUBLIC_IP}:81"
                echo "The instance is successfully deployed. Access it here: ${instanceUrl}"
            }
        }
        failure {
            echo "The pipeline failed. Please check the logs for details."
        }
    }
}
