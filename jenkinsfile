def EC2_PUBLIC_IP = ""
def RDS_ENDPOINT = ""
def DEPLOYER_KEY_URI = ""
pipeline {
    agent any
    environment {
            AWS_ACCESS_KEY_ID = credentials('jenkins_aws_access_key_id')
            AWS_SECRET_ACCESS_KEY = credentials('jenkins_aws_secret_access_key')
            AWS_CREDENTIALS_ID = 'aws-credentials'
            ECR_REPO_URL = '307946682088.dkr.ecr.us-east-1.amazonaws.com'
            ECR_REPO_NAME = 'test'
            IMAGE_REPO = "${ECR_REPO_URL}/${ECR_REPO_NAME}"
            IMAGE_REPO_FRONTEND = "${IMAGE_REPO}:frontend-1.0"
            IMAGE_REPO_BACKEND = "${IMAGE_REPO}:backend-1.0"
            AWS_REGION = "us-east-1"

        }
    stages {
        stage('Provision Server and Database') {
            steps {
                script {
                    dir('my-terraform-project') {
                        // Initialize Terraform
                        bat 'wsl -d Ubuntu-22.04 terraform init'
                        bat 'wsl -d Ubuntu-22.04 terraform plan -lock=false'

                        // Apply Terraform configuration
                        bat 'wsl -d Ubuntu-22.04 terraform apply -lock=false --auto-approve'

                        // Get EC2 Public IP
                        EC2_PUBLIC_IP = bat(
                            script: 'wsl -d Ubuntu-22.04 terraform output -raw instance_public_ip',
                            returnStdout: true
                        ).trim()

                        // Get RDS Endpoint
                        RDS_ENDPOINT = bat(
                            script: 'wsl -d Ubuntu-22.04 terraform output -raw rds_endpoint',
                            returnStdout: true
                        ).trim()

                        echo "EC2 Public IP: ${EC2_PUBLIC_IP}"
                        echo "RDS Endpoint: ${RDS_ENDPOINT}"
                    }
                }
            }
        }
        stage('Update Frontend Configuration') {
            steps {
                script {
                    dir('enis-app-tp/frontend/src') {
                        writeFile file: 'config.js', text: """
                        export const API_BASE_URL = 'http://${EC2_PUBLIC_IP}:8000';
                        """
                        bat 'wsl -d Ubuntu-22.04 cat config.js'
                    }
                }
            }
        }
        stage('Update Backend Configuration') {
            steps {
                script {
                    dir('enis-app-tp/backend/backend') {
                        bat """
                        wsl -d Ubuntu-22.04 sed -i "/'HOST':/c\\        'HOST': '${RDS_ENDPOINT}'," settings.py
                        """
                        bat 'wsl -d Ubuntu-22.04 sed -n "/DATABASES = {/,/^}/p" settings.py'
                    }
                }
            }
        }
        stage('Create Database in RDS') {
            steps {
                script {
                    bat """
                    wsl -d Ubuntu-22.04 mysql -h ${RDS_ENDPOINT} -P 3306 -u dbuser -pDBpassword2024 -e "CREATE DATABASE IF NOT EXISTS enis_tp;"
                    wsl -d Ubuntu-22.04 mysql -h ${RDS_ENDPOINT} -P 3306 -u dbuser -pDBpassword2024 -e "SHOW DATABASES;"
                    """
                }
            }
        }
        stage('Build Frontend Docker Image') {
            steps {
                dir('enis-app-tp/frontend') {
                    script {
                        echo 'Building Frontend Docker Image...'
                        bat 'wsl -d Ubuntu-22.04 docker build -t frontend-app .'
                    }
                }
            }
        }
        stage('Build Backend Docker Image') {
            steps {
                dir('enis-app-tp/backend') {
                    script {
                        echo 'Building Backend Docker Image...'
                        bat 'wsl -d Ubuntu-22.04 docker build -t backend-app .'
                    }
                }
            }
        }
        stage('Login to AWS ECR') {
            steps {
                script {
                    bat """
                    wsl -d Ubuntu-22.04 aws ecr get-login-password --region ${AWS_REGION} | wsl -d Ubuntu-22.04 docker login --username AWS --password-stdin ${ECR_REPO_URL}
                    """
                }
            }
        }
        stage('Tag and Push Images') {
            steps {
                script {
                    echo 'Tagging and pushing Docker images...'
                    bat """
                    wsl -d Ubuntu-22.04 docker tag frontend-app:latest ${IMAGE_REPO_FRONTEND}
                    wsl -d Ubuntu-22.04 docker push ${IMAGE_REPO_FRONTEND}
                    wsl -d Ubuntu-22.04 docker tag backend-app:latest ${IMAGE_REPO_BACKEND}
                    wsl -d Ubuntu-22.04 docker push ${IMAGE_REPO_BACKEND}
                    """
                }
            }
        }
        stage('Run Ansible Playbook') {
            steps {
                script {
                    dir('ansible') {
                        bat """
                        wsl -d Ubuntu-22.04 ansible-playbook -i hosts docker_deploy_playbook.yml
                        """
                    }
                }
            }
        }
    }
    post {
            success {
                script {
                    def instanceUrl = "http://${EC2_PUBLIC_IP}:81"
                    echo "The instance is successfully deployed. Access it here: ${instanceUrl}"
                }
            }
            failure {
                echo "The pipeline failed. Please check the logs for details."
            }
        }
}


